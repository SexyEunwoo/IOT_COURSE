
RC_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000043c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080014e  0080014e  0000051e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010bd  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000933  00000000  00000000  000016ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059f  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000546  00000000  00000000  00002b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003069  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c0       	rjmp	.+472    	; 0x222 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 34       	cpi	r26, 0x4E	; 78
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e4       	ldi	r26, 0x4E	; 78
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 35       	cpi	r26, 0x56	; 86
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	98 d1       	rcall	.+816    	; 0x3f4 <main>
  c4:	b9 c1       	rjmp	.+882    	; 0x438 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <CalcSpeed>:
   }
   
}

void CalcSpeed()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	if(cnt == 0)
  cc:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
  d0:	88 23       	and	r24, r24
  d2:	09 f4       	brne	.+2      	; 0xd6 <CalcSpeed+0xe>
  d4:	4e c0       	rjmp	.+156    	; 0x172 <CalcSpeed+0xaa>
	Lcd_PutStr("   ");
	Lcd_Goto_Xy(8, 1);
	Lcd_PutStr(nums);
	*/
	
	switch (cnt)
  d6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	79 f0       	breq	.+30     	; 0xfc <CalcSpeed+0x34>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	21 f1       	breq	.+72     	; 0x12a <CalcSpeed+0x62>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	09 f0       	breq	.+2      	; 0xe8 <CalcSpeed+0x20>
  e6:	43 c0       	rjmp	.+134    	; 0x16e <CalcSpeed+0xa6>
	{
		case 1:
			speed = (nums[cnt-1] - 48);
  e8:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ef 5a       	subi	r30, 0xAF	; 175
  f0:	fe 4f       	sbci	r31, 0xFE	; 254
  f2:	80 81       	ld	r24, Z
  f4:	80 53       	subi	r24, 0x30	; 48
  f6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speed>
			break;
  fa:	39 c0       	rjmp	.+114    	; 0x16e <CalcSpeed+0xa6>
		case 2:
			speed = ((nums[cnt-2] - 48) * 10) + nums[cnt-1] - 48;
  fc:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <__data_end>
 100:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	a0 5b       	subi	r26, 0xB0	; 176
 108:	be 4f       	sbci	r27, 0xFE	; 254
 10a:	8c 91       	ld	r24, X
 10c:	88 0f       	add	r24, r24
 10e:	80 56       	subi	r24, 0x60	; 96
 110:	98 2f       	mov	r25, r24
 112:	99 0f       	add	r25, r25
 114:	99 0f       	add	r25, r25
 116:	89 0f       	add	r24, r25
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ef 5a       	subi	r30, 0xAF	; 175
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	90 81       	ld	r25, Z
 120:	90 53       	subi	r25, 0x30	; 48
 122:	89 0f       	add	r24, r25
 124:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speed>
			break;
 128:	22 c0       	rjmp	.+68     	; 0x16e <CalcSpeed+0xa6>
		case 3:
			speed = ((nums[cnt-3] - 48) * 100) + ((nums[cnt-2] - 48) * 10) + (nums[cnt-1] - 48);
 12a:	c0 91 4e 01 	lds	r28, 0x014E	; 0x80014e <__data_end>
 12e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 132:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <__data_end>
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	c1 5b       	subi	r28, 0xB1	; 177
 13a:	de 4f       	sbci	r29, 0xFE	; 254
 13c:	98 81       	ld	r25, Y
 13e:	90 53       	subi	r25, 0x30	; 48
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	af 5a       	subi	r26, 0xAF	; 175
 144:	be 4f       	sbci	r27, 0xFE	; 254
 146:	8c 91       	ld	r24, X
 148:	80 53       	subi	r24, 0x30	; 48
 14a:	28 2f       	mov	r18, r24
 14c:	34 e6       	ldi	r19, 0x64	; 100
 14e:	93 9f       	mul	r25, r19
 150:	20 0d       	add	r18, r0
 152:	11 24       	eor	r1, r1
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	e0 5b       	subi	r30, 0xB0	; 176
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	80 81       	ld	r24, Z
 15c:	88 0f       	add	r24, r24
 15e:	80 56       	subi	r24, 0x60	; 96
 160:	98 2f       	mov	r25, r24
 162:	99 0f       	add	r25, r25
 164:	99 0f       	add	r25, r25
 166:	89 0f       	add	r24, r25
 168:	82 0f       	add	r24, r18
 16a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speed>
			break;
	}

	cnt = 0;
 16e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <serial_init>:

void serial_init(void){
   UBRR0H = 0x00;
 178:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
   UBRR0L = 0x67;
 17c:	87 e6       	ldi	r24, 0x67	; 103
 17e:	89 b9       	out	0x09, r24	; 9
   
   UCSR0A=0x00;
 180:	1b b8       	out	0x0b, r1	; 11
   UCSR0B=0x98;
 182:	88 e9       	ldi	r24, 0x98	; 152
 184:	8a b9       	out	0x0a, r24	; 10
   UCSR0C=0x06;
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
   sei();
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <Lcd_Cmd_Write>:
}

void Lcd_Cmd_Write(unsigned char cmd)
{
   PORTB = 0x00; // RS=0, R/W=0, E=0
 190:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	95 e0       	ldi	r25, 0x05	; 5
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <Lcd_Cmd_Write+0x4>
 198:	00 00       	nop
   _delay_us(1);
   PORTB ^= 0x04; // RS=0, R/W=0, E=1
 19a:	28 b3       	in	r18, 0x18	; 24
 19c:	94 e0       	ldi	r25, 0x04	; 4
 19e:	29 27       	eor	r18, r25
 1a0:	28 bb       	out	0x18, r18	; 24
   PORTC = cmd;
 1a2:	85 bb       	out	0x15, r24	; 21
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Lcd_Cmd_Write+0x16>
 1aa:	00 00       	nop
   _delay_us(1);
   PORTB ^= 0x04; // RS = 0, R/W = 0, E = 0
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	98 27       	eor	r25, r24
 1b0:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e1       	ldi	r24, 0x1F	; 31
 1b4:	9e e4       	ldi	r25, 0x4E	; 78
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Lcd_Cmd_Write+0x26>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Lcd_Cmd_Write+0x2c>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <Lcd_Data_Write>:
   _delay_ms(5);
}

void Lcd_Data_Write(unsigned char data)
{
   PORTB = 0x01; // RS=1, R/W=0, E=0
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	95 e0       	ldi	r25, 0x05	; 5
 1c6:	9a 95       	dec	r25
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Lcd_Data_Write+0x6>
 1ca:	00 00       	nop
   _delay_us(1);
   PORTB ^= 0x04; // RS=1, R/W=0, E=1
 1cc:	28 b3       	in	r18, 0x18	; 24
 1ce:	94 e0       	ldi	r25, 0x04	; 4
 1d0:	29 27       	eor	r18, r25
 1d2:	28 bb       	out	0x18, r18	; 24
   PORTC = data;
 1d4:	85 bb       	out	0x15, r24	; 21
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <Lcd_Data_Write+0x18>
 1dc:	00 00       	nop
   _delay_us(1);
   PORTB ^= 0x04; // RS = 0, R/W = 0, E = 0
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	98 27       	eor	r25, r24
 1e2:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	8f e1       	ldi	r24, 0x1F	; 31
 1e6:	9e e4       	ldi	r25, 0x4E	; 78
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <Lcd_Data_Write+0x28>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <Lcd_Data_Write+0x2e>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <Lcd_Goto_Xy>:
   _delay_ms(5);
}

void Lcd_Goto_Xy(uint8_t x, uint8_t y)
{
   if(y==0) Lcd_Cmd_Write(0x80 + x); // DDRAM의 주소는 0x80 + 각 자리의 주소값
 1f2:	61 11       	cpse	r22, r1
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <Lcd_Goto_Xy+0xa>
 1f6:	80 58       	subi	r24, 0x80	; 128
 1f8:	cb cf       	rjmp	.-106    	; 0x190 <Lcd_Cmd_Write>
 1fa:	08 95       	ret
   else if(y==1) Lcd_Cmd_Write(0xC0 + x);
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	11 f4       	brne	.+4      	; 0x204 <Lcd_Goto_Xy+0x12>
 200:	80 54       	subi	r24, 0x40	; 64
 202:	c6 cf       	rjmp	.-116    	; 0x190 <Lcd_Cmd_Write>
 204:	08 95       	ret

00000206 <Lcd_PutStr>:
}

void Lcd_PutStr(char *str)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
   while(*str != '\0') { Lcd_Data_Write(*(str++)); }
 20c:	88 81       	ld	r24, Y
 20e:	88 23       	and	r24, r24
 210:	29 f0       	breq	.+10     	; 0x21c <Lcd_PutStr+0x16>
 212:	21 96       	adiw	r28, 0x01	; 1
 214:	d5 df       	rcall	.-86     	; 0x1c0 <Lcd_Data_Write>
 216:	89 91       	ld	r24, Y+
 218:	81 11       	cpse	r24, r1
 21a:	fc cf       	rjmp	.-8      	; 0x214 <Lcd_PutStr+0xe>
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <__vector_18>:
uint8_t nums[4];
char str[] = "State :         ";
char str1[] = "Speed :         ";

ISR(USART0_RX_vect)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	0b b6       	in	r0, 0x3b	; 59
 22e:	0f 92       	push	r0
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
   data = UDR0;
 248:	8c b1       	in	r24, 0x0c	; 12
 24a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <data>
   
   if(data==70){
 24e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
 252:	86 34       	cpi	r24, 0x46	; 70
 254:	79 f4       	brne	.+30     	; 0x274 <__vector_18+0x52>
      state = FORWARD;//F
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <state>
      Lcd_Goto_Xy(8, 0);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	88 e0       	ldi	r24, 0x08	; 8
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	c6 df       	rcall	.-116    	; 0x1f2 <Lcd_Goto_Xy>
      Lcd_PutStr("FORWARD");
 266:	82 e2       	ldi	r24, 0x22	; 34
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	cd df       	rcall	.-102    	; 0x206 <Lcd_PutStr>
      PORTA = state;
 26c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <state>
 270:	8b bb       	out	0x1b, r24	; 27
 272:	8d c0       	rjmp	.+282    	; 0x38e <__vector_18+0x16c>
   }
   //PORTB = 0b10010000;
   else if(data ==66)//B
 274:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
 278:	82 34       	cpi	r24, 0x42	; 66
 27a:	79 f4       	brne	.+30     	; 0x29a <__vector_18+0x78>
   {
      state = BACKWARD;
 27c:	8a e0       	ldi	r24, 0x0A	; 10
 27e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <state>
      Lcd_Goto_Xy(8, 0);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	b3 df       	rcall	.-154    	; 0x1f2 <Lcd_Goto_Xy>
      Lcd_PutStr("BACKWARD");
 28c:	8a e2       	ldi	r24, 0x2A	; 42
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	ba df       	rcall	.-140    	; 0x206 <Lcd_PutStr>
 292:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <state>
      PORTA=state;
 296:	8b bb       	out	0x1b, r24	; 27
 298:	7a c0       	rjmp	.+244    	; 0x38e <__vector_18+0x16c>
 29a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
   
   }
   else if(data==82)//R
 29e:	82 35       	cpi	r24, 0x52	; 82
 2a0:	79 f4       	brne	.+30     	; 0x2c0 <__vector_18+0x9e>
 2a2:	85 e0       	ldi	r24, 0x05	; 5
   {
      state= FORWARD;
 2a4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <state>
 2a8:	60 e0       	ldi	r22, 0x00	; 0
      Lcd_Goto_Xy(8, 0);
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	a0 df       	rcall	.-192    	; 0x1f2 <Lcd_Goto_Xy>
      Lcd_PutStr("RIGHT   ");
 2b2:	83 e3       	ldi	r24, 0x33	; 51
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	a7 df       	rcall	.-178    	; 0x206 <Lcd_PutStr>
 2b8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <state>
      PORTA = state;   
 2bc:	8b bb       	out	0x1b, r24	; 27
 2be:	67 c0       	rjmp	.+206    	; 0x38e <__vector_18+0x16c>
 2c0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>

   }
   else if(data==76)//L
 2c4:	8c 34       	cpi	r24, 0x4C	; 76
 2c6:	79 f4       	brne	.+30     	; 0x2e6 <__vector_18+0xc4>
 2c8:	85 e0       	ldi	r24, 0x05	; 5
   {
      state = FORWARD;
 2ca:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <state>
      Lcd_Goto_Xy(8, 0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	8d df       	rcall	.-230    	; 0x1f2 <Lcd_Goto_Xy>
      Lcd_PutStr("LEFT    ");
 2d8:	8c e3       	ldi	r24, 0x3C	; 60
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	94 df       	rcall	.-216    	; 0x206 <Lcd_PutStr>
 2de:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <state>
      PORTA = state;
 2e2:	8b bb       	out	0x1b, r24	; 27
 2e4:	54 c0       	rjmp	.+168    	; 0x38e <__vector_18+0x16c>
 2e6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
      

   }
   else if(data==83)//S
 2ea:	83 35       	cpi	r24, 0x53	; 83
 2ec:	71 f4       	brne	.+28     	; 0x30a <__vector_18+0xe8>
   {
      state = STOP;
 2ee:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <state>
      Lcd_Goto_Xy(8, 0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	7b df       	rcall	.-266    	; 0x1f2 <Lcd_Goto_Xy>
      Lcd_PutStr("STOP    ");
 2fc:	85 e4       	ldi	r24, 0x45	; 69
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	82 df       	rcall	.-252    	; 0x206 <Lcd_PutStr>
 302:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <state>
      PORTA =state;
 306:	8b bb       	out	0x1b, r24	; 27
 308:	42 c0       	rjmp	.+132    	; 0x38e <__vector_18+0x16c>
 30a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
      
   }
   else
   {
	   if((data >= 48 && data <= 57) && cnt < 3) // 만약 data가 숫자라면
 30e:	80 33       	cpi	r24, 0x30	; 48
 310:	78 f1       	brcs	.+94     	; 0x370 <__vector_18+0x14e>
 312:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
 316:	8a 33       	cpi	r24, 0x3A	; 58
 318:	58 f5       	brcc	.+86     	; 0x370 <__vector_18+0x14e>
 31a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
 31e:	83 30       	cpi	r24, 0x03	; 3
	   {
		   Lcd_Goto_Xy(8, 1);
 320:	38 f5       	brcc	.+78     	; 0x370 <__vector_18+0x14e>
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	88 e0       	ldi	r24, 0x08	; 8
 328:	90 e0       	ldi	r25, 0x00	; 0
		   Lcd_PutStr("   ");
 32a:	63 df       	rcall	.-314    	; 0x1f2 <Lcd_Goto_Xy>
 32c:	8a e4       	ldi	r24, 0x4A	; 74
 32e:	91 e0       	ldi	r25, 0x01	; 1
		   Lcd_Goto_Xy(8, 1);
 330:	6a df       	rcall	.-300    	; 0x206 <Lcd_PutStr>
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	88 e0       	ldi	r24, 0x08	; 8
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	5b df       	rcall	.-330    	; 0x1f2 <Lcd_Goto_Xy>
		   Lcd_Data_Write(data);
 33c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	3e df       	rcall	.-388    	; 0x1c0 <Lcd_Data_Write>
 344:	2f ef       	ldi	r18, 0xFF	; 255
 346:	87 ea       	ldi	r24, 0xA7	; 167
 348:	91 e6       	ldi	r25, 0x61	; 97
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <__vector_18+0x128>
 352:	00 c0       	rjmp	.+0      	; 0x354 <__vector_18+0x132>
 354:	00 00       	nop
 356:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
		   _delay_ms(2000);
		   nums[cnt++] = data;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	8e 0f       	add	r24, r30
 35e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
 362:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	ee 5a       	subi	r30, 0xAE	; 174
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	80 83       	st	Z, r24
 36e:	0f c0       	rjmp	.+30     	; 0x38e <__vector_18+0x16c>
      
   }
   else
   {
	   if((data >= 48 && data <= 57) && cnt < 3) // 만약 data가 숫자라면
	   {
 370:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <data>
		   Lcd_Goto_Xy(8, 1);
		   Lcd_Data_Write(data);
		   _delay_ms(2000);
		   nums[cnt++] = data;
	   }
	   else if(data == 'e' || cnt == 3) // 만약 data가 e라면
 374:	85 36       	cpi	r24, 0x65	; 101
 376:	21 f0       	breq	.+8      	; 0x380 <__vector_18+0x15e>
 378:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
 37c:	83 30       	cpi	r24, 0x03	; 3
 37e:	39 f4       	brne	.+14     	; 0x38e <__vector_18+0x16c>
	   {
		   nums[cnt] = '\0';
 380:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	ee 5a       	subi	r30, 0xAE	; 174
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	10 82       	st	Z, r1
		   CalcSpeed();
 38c:	9d de       	rcall	.-710    	; 0xc8 <CalcSpeed>
 38e:	ff 91       	pop	r31
	   }
   }
   
}
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0b be       	out	0x3b, r0	; 59
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <Lcd_Init>:
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	81 ee       	ldi	r24, 0xE1	; 225
 3b8:	94 e0       	ldi	r25, 0x04	; 4
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <Lcd_Init+0x6>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <Lcd_Init+0x10>
 3c4:	00 00       	nop
}

void Lcd_Init()
{
   _delay_ms(100);
   Lcd_Cmd_Write(0x38); // Function set, 00111000
 3c6:	88 e3       	ldi	r24, 0x38	; 56
 3c8:	e3 de       	rcall	.-570    	; 0x190 <Lcd_Cmd_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ca:	25 e0       	ldi	r18, 0x05	; 5
 3cc:	2a 95       	dec	r18
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <Lcd_Init+0x18>
 3d0:	00 00       	nop
   _delay_us(1);
   Lcd_Cmd_Write(0x0C); // 00001100
 3d2:	8c e0       	ldi	r24, 0x0C	; 12
 3d4:	dd de       	rcall	.-582    	; 0x190 <Lcd_Cmd_Write>
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	8a 95       	dec	r24
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <Lcd_Init+0x24>
   _delay_us(1);
   Lcd_Cmd_Write(0x01); // 00000001
 3dc:	00 00       	nop
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	d7 de       	rcall	.-594    	; 0x190 <Lcd_Cmd_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e2:	8f ed       	ldi	r24, 0xDF	; 223
 3e4:	9e e2       	ldi	r25, 0x2E	; 46
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <Lcd_Init+0x32>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <Lcd_Init+0x38>
   _delay_ms(3);
   Lcd_Cmd_Write(0x06); // 00000110
 3ec:	00 00       	nop
 3ee:	86 e0       	ldi	r24, 0x06	; 6
 3f0:	cf ce       	rjmp	.-610    	; 0x190 <Lcd_Cmd_Write>
 3f2:	08 95       	ret

000003f4 <main>:
}

 int main(void)
 {   
	DDRA = 0xFF;   // 모터 방향제어   포트A의 8비트 전체를 출력으로 설정
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;   // PWM2개, LCD명령어   포트B의 8비트 전체를 출력으로 설정
 3f8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;   // LCD Data포트
 3fa:	84 bb       	out	0x14, r24	; 20
	DDRF = 0xFF;   // LED 포트
 3fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   
	TCCR0 = 0x6D;   //Timer0, fast PWM, presclaler 128설정
 400:	8d e6       	ldi	r24, 0x6D	; 109
 402:	83 bf       	out	0x33, r24	; 51
	TCCR2 = 0x6D;   //Timer2, fast PWM, presclaler 128설정
 404:	85 bd       	out	0x25, r24	; 37
   
	Lcd_Init();
 406:	d6 df       	rcall	.-84     	; 0x3b4 <Lcd_Init>
	Lcd_Goto_Xy(0,0);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	f2 de       	rcall	.-540    	; 0x1f2 <Lcd_Goto_Xy>
	Lcd_PutStr(str);
 40e:	81 e1       	ldi	r24, 0x11	; 17
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	f9 de       	rcall	.-526    	; 0x206 <Lcd_PutStr>
	Lcd_Goto_Xy(0,1);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	ec de       	rcall	.-552    	; 0x1f2 <Lcd_Goto_Xy>
	Lcd_PutStr(str1);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	f3 de       	rcall	.-538    	; 0x206 <Lcd_PutStr>
 420:	ab de       	rcall	.-682    	; 0x178 <serial_init>
	serial_init();
 422:	85 e0       	ldi	r24, 0x05	; 5
 424:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
   
	PORTF = 0b00000101;
 428:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <speed>
	while(1){
      OCR0=speed;   OCR2=speed-20;
 42c:	81 bf       	out	0x31, r24	; 49
 42e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <speed>
 432:	84 51       	subi	r24, 0x14	; 20
 434:	83 bd       	out	0x23, r24	; 35
 436:	f8 cf       	rjmp	.-16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
