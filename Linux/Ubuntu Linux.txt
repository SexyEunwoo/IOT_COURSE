1. 리눅스의 기초
 1.1 리눅스의 발전
  - 리눅스 = 리눅스 커널(리누스) + 응용프로그램(GNU프로젝트) + 셸
    -> 커널 : 리눅스의 핵심으로 운영체제를 전반적으로 관리해준다
    -> 셸 : 리눅스의 사용자 인터페이스로 사용자와 커널 사이의 중간자 역살



2. 리눅스 파일의 종류와 특징
 2.1 파일의 종류
  - 일반파일 : 데이터를 저장하는데 주로 사용(txt, 실행파일, 이미지파일 등등)
  - 디렉터리 : 데이터를 관리하기 쉽게 묶어준다
  - 심벌릭 링크 : 원본 파일을 대신 하도록 한 것
  - 장치파일 : 하드디스크나 키보드같은 장치도 파일로 관리한다
  
 2.2 파일링크
  - 하드링크 : 기존 파일에 새로운 파일명을 추가생성 하는 것(실제로 같은 하드디스크의 위치를 나타냄 = inode가 같다)
  - 심볼릭 링크 : 하드링크를 가리키는 파일로서 하드디스크상에 파일이 새롭게 생성된다
  - inode : 파일에 대한 정보를 가지고 있는 구조체
  - 복사 : 아예 새로운 파일을 추가하는 것(하드디스크의 위치가 다르다 == inode가 다르다)
 
 2.3 whereis, which
  - whereis : 환경변수$PATH와 $MANPATH에 지정된 디렉터리를 검색해서 파일의 위치를 찾음(모든 경로 출력)
  - which : 명령어 파일의 위치를 찾아서 그 경로나 alias를 출력(최대 하나의 경로만 출력)
  

3. Vi편집기
 3.1 vi모드의 종류
  - 명령모드 : 입력한 키를 명령어로 해석(커서이동, 페이지이동, 행삭제 등등)
  - 입력모드 : 입력한 키를 내용으로 입력
  - 마지막행 모드 : 특별명령처리(검색, 바꾸기, 저장 등등)
 
 3.2 입력모드 전환 명령 키
  - i : 현재커서에 입력시작
  - I : 현재커서 행의 맨앞에서 시작
  - a : 현재커서 뒤에 입력시작
  - A : 현재커서 행의 맨 뒤에서 시작
  - o : 현재커서 다음행에 입력시작
  - O : 현재커서 이전행에 입력시작
 
 3.3 네임드 버퍼
  - "a ~ "z를 이용해서 여러개의 버퍼를 동시에 사용 가능
	ex) "ayy => 현재 행을 a버퍼에 저장, "by2 => 현재 행부터 2행을 b버퍼에 저장
	    "app => 현재 행에 a버퍼 붙여넣기, "bpp => 현재 행에 b버퍼 붙여넣기



4. 셸 사용하기
  4.1 셸의 기능
   - 명령어 해석 기능 : 사용자가 입력한 명령어를 적절히 해석하고 적절한 처리를 진행한다
   - 프로그래밍 기능 : 셸 자체적으로 프로그래밍 기능이 있다
   - 사용자 환경 설정 기능 : 초기화 파일 기능을 제공
   
  4.2 셸의 종류
   - 본 셸 : 최초의 셸, but 사용자 편의 기능이 없어서 이후 다른 셸들이 번창
   - C 셸 : 본 셸의 기능을 확장, 사용자편의기능 포함, 속도가 느림
   - 배시 셸 : 본 셸 기반의 셸으로서 본 셸과의 호환성을 유지하면서 C셸, 콘 셸의 편리한 기능도 포함
    ㄴ> 우분투 기본 셸
  
  4.3 셸 특수문자
   - * : 임의의 문자 또는 문자열
   - ? : 임의의 한 문자
   - [] : 괄호안에 포함된 문자 중 하나의 문자
     ex) [012] : 0 또는 1 또는 2, [a-z] : a ~ z까지 한 문자
   - ~ : 현재 사용자의 홈 디렉토리
   - - : 이전 디렉토리
   - '' : 모든 특수문자를 일반 문자로 바꿈
   - "" : $, ``, \ 을 제외한 모든 특수문자를 일반 문자로 바꿈
   - $ : 셸 변수 값 출력
   - `` : 내부 문자열을 명령어로 해석
   - \ : 해당 특수문자를 일반 문자로 해석(\$HOME -> $HOME출력)
   
  4.4 배시 셸 환경설정
   - 셸 변수 : 현재 셸에서만 적용되는 내용
   - 환경 변수 : 모든 셸에 적용되는 내용
   - set : 셸 변수와 환경변수 모두 출력
   - env : 환경변수만 출력
   - export : 셸 변수를 환경변수로 설정해줌
     ex) export SOME=test
  
  4.5 명령 재실행
   - !번호 : 히스토리에서 해당 번호의 명령을 재실행
   - !! : 바로 직전에 실행한 명령을 재실행
   - !문자열 : 문자열로 시작하는 가장 최근의 명령을 재실행
   



5. 환경설정 파일
  5.1 시스템 환경 설정 파일
   - 시스템 환경 설정 : 시스템을 사용하는 전체 사용자의 공통 환경을 설정하는 파일
   - /etc/profile : 본셸 또는 본셸이 호환되는 모든 셸에 공통으로 적용되는 .profile파일
					배시셸의 경우 /etc/bash.bashrc를 실행
					/etc/profile.d/*.sh 파일 실행
					
  5.2 사용자 환경 설정 파일
   - 사용자 환경 설정 : 사용자가 로그인시 제일 먼저 시스템 환경 설정 파일이 실행되어 공통 환경을 만들고
					이후, 사용자 환경 설정 파일을 순서대로 실해하여 사용자의 환경을 설정
   - ~/.profile : 경로추가 등 사용자 정의 환경을 실행 및 .bashrc파일이 있으면 실행
   - ~/.bashrc : 히스토리 크기 설정, alias나 함수 설정
   - ~/.bash.aliases : 사용자 정의 에일리어스를 별도로 저장하는 파일
   - ~/.bash_logout : 로그아웃 시 실행할 필요가 있는 함수 등을 설정
   
  

6. 파일의 속성
  6.1 파일의 접근권한
    - 기호모드로 접근권한 설정 : chmod ugoa+-rwx text.txt
    - 숫자모드로 접근 권한 설정 : chmod 755 text.txt
    - umask : 기본 접근권한 설정(0022로 되어있음)

  6.2 특수접근권한
    - SetUID : 파일을 실행할 때 소유자의 권한으로 실행하도록 바꿔줌, 소유자의 실행 권한에 s가 표시됨(chmod 4*** 파일)
    - SetGID : 파일을 실행할 때 소유그룹의 권한으로 실행하도록 바꿔줌, 그룹 실행 권한에 s가 표시됨(chmod 2*** 파일)
    - StickyBit : 특정 폴더를 자유게시판처럼 만들어줌, 설정되어 있다면 기타사용자의 실행 권한에 i가 표시됨(chmod 1*** 폴더)




7. 프로세스
  7.1 프로세스의 종류
    - 데몬 프로세스 : 특정 서비스를 제공하기 위해 커널에 의해 실행되는 프로세스(항상 켜져있음)
    - 고아 프로세스 : 자식 프로세스가 종료되기 전에 부모 프로세스가 종료되면 자식프로세스는 고아 프로세스가 된다.
                           이러한 경우 1번 프로세스가 고아 프로세스의 새로운 부모가 되어 고아 프로세스의 정상종료를 돕는다
    - 좀비 프로세스 : 자식 프로세스가 실행을 종료했음에도 프로세스 테이블 목록에 남아있는 경우
                           kill명령으로 종료 불가능하며, SIGCHID시그널을 부모 프로세스에게 보내 종료를 유도해야 한다

  7.2 프로세스 시그널
    - SIGHUP(1번, 종료) : 터미널과의 연결이 끊어졌을 떄 발생
    - SIGINT(2번, 종료) : 인터럽트로 Ctrl+c 입력시 발생
    - SIGQUIT(3번, 종료) : 종료 신호로 Ctrl+/ 입력시 발생
    - SIGKILL(9번, 종료) : 프로세스 강제 종료
    - SIGALRM(14번, 종료) : 알람에 의해 발생
    - SIGTERM(15번, 종료) : kill 명령이 보내는 기본 시그널

  7.3 포그라운드 백그라운드 작업
    - Foreground작업 : 사용자가 입력한 명령이 실행되어 결과가 출력될 때 까지 기다리는 방식
    - Background작업 : 사용자가 입력한 명령이 실행되는 중간에 다른 작업을 계속 이어나가는 방식
    - & : 명령어 뒤에 &를 붙이면 백그라운드로 실행된다 (ex: sleep 50 &)
    - jobs : 현재 실행중인 백그라운드 작업 보기
    - fg%n, bg%n 명령어 : n번 작업을 포그라운드로 또는 백그라운드로 실행(%n이 없을 시 가장 최근작업을 의미)
    - nohup : 로그아웃을 진행한 뒤에도 백그라운드 작업이 계속됨

  7.4 작업 예약
    - at : 예약한 명령을 정해진 시간에 실행한다
    - at -l, atq : at명령으로 설정된 작업목록 불러오기
    - at -d, atrm : at작업 삭제하기
    - /etc/at.allow, /etc/at.deny : at명령어를 사용할 사용자 지정